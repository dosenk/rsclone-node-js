#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('src:server');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '80');

app.set('port', port);

/**
 * Create HTTP server.
 */

const server = require('http').createServer(app);
const options = {
    cors: true,
    methods: ["GET", "POST"],
    origins:["https://rsclone-node-js.herokuapp.com/"],
};
const io = require('socket.io')(server, options);

const users = new Map();
const painter = [];
let gameFlag = false;


io.on('connection', socket => { 
 
    socket.on("broadcast", (args) => {
        console.log(args);
        io.emit("broadcast", users.get(socket.id), args);
    });

    socket.on("name", (args) => {
      console.log(socket.id, '- socket id');
      users.set(socket.id, args);
      if (!gameFlag) setPainter()
      else io.to(socket.id).emit("game", 'guesser');
    });

    socket.on("disconnect", () => {
        users.delete(socket.id);
    });
});

function setPainter() {
  if (users.size > 1) {
    let gamer = 'painter';
    for (const userEntries of users) {
      const socketId = userEntries[0];
      if (painter.indexOf(socketId) === -1) {
        painter.push(socketId);
        gameFlag = true;
        io.to(socketId).emit("game", gamer);
        break;
      }
    }
  }
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
